# This is a basic workflow that is manually triggered

name: Build and Deploy Prod

permissions:
  id-token: write  # Required for AWS credentials
  contents: read  # This is required for actions/checkout

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: Build type
        required: true
        type: choice
        options:
          - prod
          - dev
        default: prod

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4

      - name: Setup Node.js environment
        uses: actions/setup-node@v4.0.2
        with:
          node-version: 20
          check-latest: true
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Build bundle
        run: |-
          if [[ "prod" == "${{ inputs.build_type }}" ]]; then SCRIPT="build:prod"
          elif [[ "dev" == "${{ inputs.build_type }}" ]]; then SCRIPT="build:prod"
          else 
            >&2 echo "unknown build type: ${{ inputs.build_type }}"
            exit 1
          fi

          npm run "$SCRIPT"

      - name: Upload bundle
        id: upload-bundle
        uses: actions/upload-artifact@v4
        with:
          name: web-bundle
          path: ./build
          if-no-files-found: error

  s3-publish:
    name: S3 Publish
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Authenticate to AWS
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-region: us-east-1
          audience: sts.amazonaws.com
          role-to-assume: "arn:aws:iam::637423182435:role/bkdf_deploy_website"

      - name: Download bundle
        uses: actions/download-artifact@v4
        with:
          name: web-bundle


      - name: Deploy bundle
        uses: reggionick/s3-deploy@v4
        with:
          folder: build
          bucket-region: us-east-1
          bucket: ${{ secrets.S3_BUCKET }}

          delete-removed: true  # clean up files not in the distribution
          private: true  # ACL is handled through cloudfront

          dist-id: ${{ secrets.CF_DIST_ID }}  # Cloudfront distribution to invalidate
